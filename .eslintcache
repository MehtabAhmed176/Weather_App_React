[{"C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\index.js":"1","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\App.js":"2","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\reportWebVitals.js":"3","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\components\\WeatherForm.js":"4","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\api-fetch\\geolocation.js":"5","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\api-fetch\\darksky.js":"6"},{"size":546,"mtime":1607387059611,"results":"7","hashOfConfig":"8"},{"size":236,"mtime":1607609022651,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":3265,"mtime":1607609022651,"results":"11","hashOfConfig":"8"},{"size":453,"mtime":1607608961912,"results":"12","hashOfConfig":"8"},{"size":420,"mtime":1607608967050,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"heklco",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\index.js",[],["30","31"],"C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\App.js",["32"],"import logo from './logo.svg';\nimport './App.css';\n\nimport WeatherResult from './components/WeatherForm'\n\nfunction App() {\n \n  return (\n    <div className=\"App\">\n     \n       <WeatherResult/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\reportWebVitals.js",[],"C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\components\\WeatherForm.js",["33"],"import React, { useState } from 'react';\r\nimport { Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\nimport { geoCoordinates } from '../api-fetch/geolocation'\r\nimport { weather } from '../api-fetch/darksky'\r\nconst WeatherResult = (props) => {\r\n\r\n    const [city, setCity] = useState(\"\")\r\n    const [weatherSummary, setWeatherSummary] = useState(\"\")\r\n    const [temprature, setTemprature] = useState(\"\")\r\n    const [buttonText, setButtonText] = useState('F');\r\n    const [buttonTextChange, setButtonTextChange] = useState(true)\r\n    const [formDisable, setFormDisable] = useState(true)\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        geoCoordinates(city, (data) => {\r\n\r\n            //data is an array\r\n            /* data[0] is the latitude(hopefully)\r\n            data[1] is the longitude\r\n            \r\n            both geoCoordinates and weather are using \r\n            callback pattern\r\n    \r\n            this could be improved\r\n            \r\n            */\r\n\r\n            weather(data[0], data[1], (summary, temp) => {\r\n                console.log('the result is ', summary, temp)\r\n                setWeatherSummary(summary)\r\n                setTemprature(temp)\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        console.log('e :', e.target.value);\r\n        setCity(e.target.value);\r\n        if (city === '' || e.target.value.length <= 3) {\r\n            setFormDisable(true)\r\n        }\r\n        else {\r\n            setFormDisable(false)\r\n        }\r\n\r\n    }\r\n\r\n    const DisplayWeather = (props) => {\r\n        return (\r\n            <div>\r\n                <h4>Weather in {city} </h4> <br />\r\n                <p><i>Summary</i> --  {weatherSummary}</p>\r\n                <i>Temprature</i> --  {temprature * 100}\r\n                <FahrenhitetoCenti />\r\n\r\n            </div>\r\n        )\r\n    }\r\n    const FahrenhitetoCenti = () => {\r\n        return (\r\n            <div>\r\n                <button onClick={() => {\r\n                    setButtonTextChange(!buttonTextChange)\r\n                    if (buttonTextChange) {\r\n                        setButtonText('F')\r\n                    }\r\n                    else {\r\n                        setButtonText('C')\r\n                    }\r\n                }}>\r\n                    {buttonText}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"p-5\">\r\n                {DisplayWeather()}\r\n            </div>\r\n            <Form onSubmit={(e) => {\r\n                handleSubmit(e)\r\n            }}>\r\n                <FormGroup row>\r\n                    <Label for=\"cityName\" sm={2}>City Name</Label>\r\n                    <Col sm={10}>\r\n\r\n                        <Input type=\"text\" name=\"cityName\" id=\"cityName\" placeholder=\"Please enter city name here\" value={city} onChange={(e) => {\r\n                            handleChange(e)\r\n                        }} />\r\n                    </Col>\r\n                </FormGroup>\r\n\r\n                <FormGroup check row>\r\n\r\n                    <Button disabled={formDisable}>Check Weather</Button>\r\n\r\n                </FormGroup>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherResult;\r\n","C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\api-fetch\\geolocation.js",[],"C:\\Users\\mehta\\Desktop\\Weather-App\\weather-app\\src\\api-fetch\\darksky.js",["34"],"export const weather = (latitude, longitude, callback) => {\r\n\r\n  var requestOptions = {\r\n    method: 'GET',\r\n    redirect: 'follow'\r\n  };\r\n\r\n  fetch(`https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY}/${latitude},${longitude}`)\r\n    .then(response => response.json())\r\n    .then(result => callback(result.hourly.summary, result.currently.cloudCover))\r\n    .catch(error => console.log('error', error));\r\n} ",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":2,"column":54,"nodeType":"41","messageId":"42","endLine":2,"endColumn":62},{"ruleId":"39","severity":1,"message":"44","line":3,"column":7,"nodeType":"41","messageId":"42","endLine":3,"endColumn":21},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'FormText' is defined but never used.","'requestOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]